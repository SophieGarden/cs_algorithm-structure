2. Add Two Numbers
Medium

7009

1812

Add to List

Share
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        dummy = l3 = ListNode(0)
        carry = 0
        while carry or l1 is not None or l2 is not None:
            add = carry
            if l1 is not None:
                add += l1.val
                l1 = l1.next

            if l2 is not None:
                add += l2.val
                l2 = l2.next
            
            l3.next = ListNode(add % 10)
            l3 = l3.next
            carry = add // 10
            
        return dummy.next

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode(0)
        l3 = dummy
        carry = 0
        while l1 or l2 or carry:
            val1 = (l1.val if l1 else 0)
            val2 = (l2.val if l2 else 0)
            carry, remainder = divmod(val1 + val2 + carry, 10)
            l3.next = ListNode(remainder)
            l1 = (l1.next if l1 else None)
            l2 = (l2.next if l2 else None)
            l3 = l3.next
            
        return dummy.next



