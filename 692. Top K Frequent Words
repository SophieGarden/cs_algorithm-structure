692. Top K Frequent Words
Medium

644

59

Favorite

Share
Given a non-empty list of words, return the k most frequent elements.

Your answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.

Example 1:
Input: ["i", "love", "leetcode", "i", "love", "coding"], k = 2
Output: ["i", "love"]
Explanation: "i" and "love" are the two most frequent words.
    Note that "i" comes before "love" due to a lower alphabetical order.
Example 2:
Input: ["the", "day", "is", "sunny", "the", "the", "the", "sunny", "is", "is"], k = 4
Output: ["the", "is", "sunny", "day"]
Explanation: "the", "is", "sunny" and "day" are the four most frequent words,
    with the number of occurrence being 4, 3, 2 and 1 respectively.
Note:
You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Input words contain only lowercase letters.
Follow up:
Try to solve it in O(n log k) time and O(n) extra space.
Accepted
53,583
Submissions
119,300






class OppositeString(str):
    def __lt__(self, other):
        return super(OppositeString, other).__lt__(self)

class Solution:
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        from collections import Counter
        import heapq

        d_word_counter = Counter(words)

        frequency = []
        for word, count in d_word_counter.items():
            heapq.heappush(frequency, (count, OppositeString(word)))
            if len(frequency) > k:
                heapq.heappop(frequency)
        frequency.sort(key=lambda x: (-x[0], str(x[1])))
        res = []
        for count, word in frequency:
            res.append(str(word))
        return res
# does not work code:
#         res = []
#         while len(frequency) > 0:
#             res.append(heapq.heappop(frequency)[1])

#         return res[::-1]
