'''
128. Longest Consecutive Sequence
Hard

1604

73

Favorite

Share
Given an unsorted array of integers, find the length of the longest consecutive elements sequence.

Your algorithm should run in O(n) complexity.

Example:

Input: [100, 4, 200, 1, 3, 2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

'''


class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        if len(nums)==0:
            return 0
        nums = list(set(nums))
        nums.sort()

        cur_len = 1
        max_len = 1
        for i in range(1,len(nums)):

            if nums[i] == nums[i-1]+1:
                cur_len +=1
            else:
                cur_len = 1
            max_len = max(max_len, cur_len)
        return max_len

        '''
        time complexity O(nlgn) sort
        space complexity O(1) For the implementations provided here, the space complexity is constant because we sort the input array in place. If we are not allowed to modify the input array, we must spend linear space to store a sorted copy.
        '''


        class Solution:
            def longestConsecutive(self, nums: List[int]) -> int:

                nums_set = set(nums)
                max_len = 0
                for n in nums_set:
                    if n-1 not in nums_set:
                        cur_num = n
                        cur_streak = 1

                        while cur_num+1 in nums_set:
                            cur_num += 1
                            cur_streak += 1

                        max_len = max(max_len, cur_streak)

                return max_len

                '''
                time complexity O(n)
                space complexity O(n)
                '''
