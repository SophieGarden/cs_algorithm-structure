Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        # sliding window
        left = 0
        d = {}
        max_l = 0
        for i, c in enumerate(s):
            if c in d:
                left = max(left, d[c] + 1) 
            d[c] = i
            max_l = max(max_l, i-left+1)
        return max_l

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        max_len = 0
        cur_len = 0

        for i in range(len(s)):
            store = set()
            for j in range(i, len(s)):
                if s[j] in store:
                    cur_len = j - i
                    break
                elif j == len(s)-1:
                    cur_len = j - i + 1
                else:
                    store.add(s[j])
            max_len = max(max_len, cur_len)
        
        return max_len
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        max_len = 0
        for i in range(len(s)):
            seen = set()
            for j in range(i, len(s) + 1):
                if j == len(s) or s[j] in seen:
                    break
                else:
                    seen.add(s[j])
            max_len = max(max_len, j - i)
        
        return max_len
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        seen = {}
        max_len = 0
        left = 0
        for i in range(len(s)):
            if s[i] in seen:
                left = max(seen[s[i]], left)
            max_len = max(max_len, i - left + 1)
            seen[s[i]] = i + 1
                
        return max_len
                
