'''
Given an unsorted array of integers, find the length of longest increasing subsequence.

Example:

Input: [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
Note:

There may be more than one LIS combination, it is only necessary for you to return the length.
Your algorithm should run in O(n2) complexity.
Follow up: Could you improve it to O(n log n) time complexity?
'''

class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        arr = [1 for _ in range(len(nums))]
        for i in range(1,len(nums)):
            arr_temp = []
            for j in range(i):
                arr_temp.append(arr[j]+1 if nums[j] < nums[i] else arr[i])
            arr[i] = max(arr_temp)
        return 0 if len(nums) == 0 else max(arr)
        '''
        **Complexity Analysis**
        Time complexity : O(n^2) Two loops of n are there.

        Space complexity : O(n) dp array of size n is used.

        improvement: Dynamic Programming with Binary Search
        '''
