3. Longest Substring Without Repeating Characters
Medium

4894

251

Favorite

Share
Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.



             class Solution:
                 def lengthOfLongestSubstring(self, s: str) -> int:
                     #brute force
                     if len(s) == 0:
                         return 0

                     max_len = 1
                     for i in range(len(s)-1):
                         j = i+1
                         while j < len(s) and s[j] != s[i] and s[j] not in s[i:j]:
                             j += 1
                         max_len = max(max_len, j-i)
                     return max_len

                     '''
                     time complexity O(n3)
                     space complexity O(1)
                     '''


                     class Solution:
                         def lengthOfLongestSubstring(self, s: str) -> int:
                             #brute force
                             d = {}
                             max_len = 0
                             start_index = 0
                             for i, char in enumerate(s):
                                 if char in d:
                                     start_index = max(start_index, d[char]+1)
                                 d[char] = i

                                 max_len = max(max_len, i-start_index+1)
                                 #print(i, char, start_index, i-start_index+1,max_len)
                             return max_len

                             '''
                             time complexity O(n)
                             space complexity O(min(m, n))).  We need O(k) space for the sliding window, where k is the size of the Set. The size of the Set is upper bounded by the size of the string n and the size of the charset/alphabet m.
                             '''
