226. Invert Binary Tree
Easy

1472

24

Favorite

Share
Invert a binary tree.

Example:

Input:

     4
   /   \
  2     7
 / \   / \
1   3 6   9
Output:

     4
   /   \
  7     2
 / \   / \
9   6 3   1
Trivia:
This problem was inspired by this original tweet by Max Howell:

Google: 90% of our engineers use the software you wrote (Homebrew), but you canâ€™t invert a binary tree on a whiteboard so f*** off.



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def invertTree(self, root: TreeNode) -> TreeNode:
        if root is None:
            return
        root.left, root.right = self.invertTree(root.right), self.invertTree(root.left)
        return root

        '''
        recursive
        time complexity O(n),where n is the number of nodes in the tree.

        Because of recursion, O(h) function calls will be placed on the stack in the worst case, where h is the height of the tree. Because h<= O(n), the space complexity is SO(n).
        '''

# iterative way
        def invertTree(self, root: TreeNode) -> TreeNode:
            stack = [root]
            while stack:
                node = stack.pop()
                if node is not None:
                    node.left, node.right = node.right, node.left
                    stack +=[node.left, node.right] # either order is fine stack +=[node.right, node.left]
            return root

            recursive
            time complexity O(n),where n is the number of nodes in the tree.

            space complexity O(n),since in the worst case, the queue will contain all nodes in one level of the binary tree. For a full binary tree, the leaf level has ceiling of n/2 =O(n) leaves.
            '''
